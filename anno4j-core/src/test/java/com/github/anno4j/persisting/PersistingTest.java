package com.github.anno4j.persisting;

import com.github.anno4j.Anno4j;
import com.github.anno4j.model.impl.ResourceObject;
import org.apache.commons.io.FileUtils;
import org.junit.Test;
import org.openrdf.annotations.Iri;
import org.openrdf.repository.object.ObjectConnection;
import org.openrdf.repository.object.composition.ClassFactory;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.sail.memory.MemoryStore;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

/**
 * Test for alternative lookup locations by Alibaba class loader.
 */
public class PersistingTest {

    /**
     * Type that will be backed up.
     */
    @Iri("http://example.org/Pizza")
    public interface Pizza extends ResourceObject {

        @Iri("http://example.org/name")
        String getName();

        @Iri("http://example.org/name")
        void setName(String name);
    }

    /**
     * The users home directory. This will contain the backed up "object" directory with generated proxies and behaviours.
     */
    private static final String HOME_DIRECTORY = System.getProperty("user.home");

    /**
     * Path of the backed up "object" directory.
     */
    private static final String CLASS_BACKUP_DIR = HOME_DIRECTORY + File.separator + "object";

    /**
     * Adds the given {@code path} as an alternative lookup location of the class loader of {@code connection}.
     * @param connection The connection having the class loader to modify.
     * @param path The path to add as an alternative lookup location.
     * @throws MalformedURLException Thrown if the given path is malformed.
     */
    private void addClassLoaderLookup(ObjectConnection connection, String path) throws MalformedURLException {
        ClassFactory classFactory = connection.getObjectFactory().getResolver().getClassFactory();
        classFactory.appendClassLoader(new URLClassLoader(new URL[]{ new File(path).toURI().toURL()}));
    }

    /**
     * Copy all files generated by Alibaba (and used by the class loader of the given connection) to {@code path}.
     * The directory {@code path} will contain the "object" directory.
     * @param connection The connection having the class loader which generated files will be backed up.
     * @param path The path of the directory that will receive the "object" folder.
     * @throws IOException Thrown if an error occurs while copying.
     */
    private void backupClassFiles(ObjectConnection connection, String path) throws IOException {
        ClassFactory classFactory = connection.getObjectFactory().getResolver().getClassFactory();
        File targetDir = new File(path);
        targetDir.mkdirs();

        FileUtils.copyDirectory(classFactory.getOutput(), targetDir);
    }

    /**
     * Checks whether a given directory doesn't contain any files.
     * @param directory The path of the directory to check.
     * @return Returns true iff the given path is a directory and it doesn't contain any files.
     */
    private boolean isDirectoryEmpty(String directory) {
        File[] files = new File(directory).listFiles();
        return files != null && files.length == 0;
    }

    @Test
    public void testPresistence() throws Exception {
        // Don't run the test if there are already files at the backup location:
        assumeTrue(!(new File(CLASS_BACKUP_DIR).exists()) || isDirectoryEmpty(CLASS_BACKUP_DIR));

        // Create an Anno4j instance without persisting schema annotations:
        Anno4j anno4j = new Anno4j(new SailRepository(new MemoryStore()), null, false);
        ObjectConnection connection = anno4j.getObjectRepository().getConnection();

        Pizza annotation = anno4j.createObject(Pizza.class);
        assertNotNull(annotation);

        // Backup generated .class files to CLASS_BACKUP_DIR and add it as class loader lookup location:
        backupClassFiles(connection, HOME_DIRECTORY);
        addClassLoaderLookup(connection, CLASS_BACKUP_DIR);

        // After backup delete all files previously generated:
        File proxyOutputDir = connection.getObjectFactory().getResolver().getClassFactory().getOutput();
        FileUtils.cleanDirectory(proxyOutputDir);

        // Create another instance of Pizza. Now the .class file from the backup directory should be picked:
        annotation = anno4j.createObject(Pizza.class);
        assertNotNull(annotation);

        // Check that there were no proxies generated:
        assertTrue(isDirectoryEmpty(proxyOutputDir.getAbsolutePath()));

        // Clean up:
        FileUtils.deleteDirectory(new File(CLASS_BACKUP_DIR));
    }
}
